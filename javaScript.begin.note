Chapter 2. 词法结构
Chapter 3. 数据类型和值
Chapter 4. 变量
Chapter 5. 表达式和运算符
Chapter 6. 语句
Chapter 7. 对象和数组
Chapter 8. 函数
Chapter 9. 类、构造函数和原型
Chapter 10. 模块和名字空间
Chapter 11. 使用正则表达式的模式匹配
Chapter 12. 脚本化 Java

Chapter 2 
	1.
	程序设计语言的词法结构是一套基本规则，用来详细说明如何使用这种语言来编写程序。
	它是一种语言的最低层次的语法，指定了变量名是什么样的，注释应使用什么字符以及语句之间如何分隔等规则。
	JavaScript 程序是用16位的 Unicode 字符集编写的，JavaScript 程序中的每个字符都是用两个字节(byte)表示的。
	7位的 ASCII 编码只适用于英语
	8位的 ISO Latin-1 编码只适用于英语和西欧语言
	
	2.
	JavaScript 区分大小写
	JavaScript 中所代表着HTML标记和属性的对象和属性通常都是小写的，例如：在JavaScript代码中 onclick事件句柄就必须是小写的。
	
	3. 语句间隔
	对于同一行的多个语句，那么必须使用分号(;)进行分隔，例如：var a = 3; var b=4; ，第二个分号可去掉
	如果不是同一行，那么可以省略分号，如：
	var a = 3
	var b = 4
	
	4. 注释(comment)
		// This is a single-line comment.
		/* This is also a comment*/ // and there is another comment.
		/*
		 * This is yet another comment.
		 * It has multiple lines.
		 */
	5. 直接量(literal)
		直接量(literal)，就是程序中直接表现出来的数据值。下面列出的都是直接量：
		
		12					// The number twelve
		1.2					// The number one point two
		"hello world"		// A string of text
		'Hi'				// Another string
		true				// A Boolean value
		false				// The other Boolean value
		/javascript/gi		// A "regular expression" literal (for pattern matching)
		null				// Absence(空) of an object
		
		数组直接量(Array literal) & 对象直接量(Object literal)
		
		{x: 1, y: 2}		// An object initializer
		[1, 2, 3, 4, 5] 	// An array initializer
		
	6. 标识符(identifier)
		所谓标识符(identifier)，就是一个名字。
		JavaScript中，idetifier 用来命名变量和函数，或用作JavaScript代码中某些循环的标签。
		identifier 命名规则：第一个字符必须是字母、下划线(_)或美元符号($)，接下来的字符可以
		是字母、数字、下划线或美元符号，数字不允许作为首字符出现，建议美元符号尽量少使用作为首字符。
		
chapter 3 数据类型和值
	
	计算机程序是通过操作值(value)(如数字3.14或文本"hello world")来运行的。
	在一种程序设计语言中，能够表示并操作的值的类型成为数据类型(datetype)。
	程序设计语言最基本的特征之一就是它支持的数据类型的集合。
	
	JavaScript允许使用3种基本数据类型 —— 数字、文本字符串和布尔值，还支持
	两种小数据类型 null(空)和 undefined(未定义)，它们各自只定义了一个值。
	
	复合数据类型 —— 对象(object)
	一个对象(是数据类型对象的成员之一)表示的值(既可以是基本值，如数字和字符串，
	也可以是复合值，如其他对象)的集合。
	JavaScript中的对象有两种，一种对象表示的是已命名的值的无序集合，另一种表示的是有编号
	的值的有序集合，后者被成为数组(array)。
	一般把对象和数组看作是两种不同的类型
	
	JavaScript还定义了另一种特殊的对象 —— 函数(function)，这也被看作独立于对象和数组的数据类型。
	
	JavaScript语言的核心还定义了其他一些专用的对象，这些对象表示的不是新的数据类型，而是对象的新的类(class).
	
	Date类定义的是表示日期的对象
	RegExp类定义的是表示正则表达式的对象
	Error类定义的是表示JavaScript程序中发生语法错误和运行时错误的对象
	
	1. 数字
	JavaScript不区别整型数值和浮点型数值，在JavaScript中，所有的数字都是有浮点型表示的。
	JavaScript采用IEEE 754标准定义的64位浮点格式表示数字，它能表示的最大值是+/-1.7976931348623157*10^308，最小值
	是+/-5*10^-324。
	
	在任何数值直接量(numeric literal)前加符号(-)可以构成它的负数，负号(-)是一元求反运算符，它不是
	数值直接量(numeric literal)语法的一部分。
	
	1.1 整型直接量
		0
		3
		100000000
	JavaScript数字格式允许精确表示-9007199254740992(-2^53)和9007199254740992(2^53)

	1.2 八进制和十六进制的直接量
	十六进制：以"0x"或"0X"开头，随后跟随十六进制数字串的直接量(0-9,a(A)-f(F))
	如： 	0xff	// 15*16 + 15 = 255
			0XFF	// 15816 + 15 = 255
			0xCAFE911
	八进制：以数字0开头，其后跟随一个数字序列，这个序列中的每个数字都是在0和7之间(包括0和7)
	如：	0377	// 3*8^2 + 7*8 + 7 = 255 (以0开头的八进制少用，因为有每个版本的支持不一样)
	
	1.3 浮点型直接量
		
	浮点型直接量可以具有小数点，一个实数值可以被表示为整数部分后加小数点和小数部分。
	还可以使用指数记数法表示浮点型直接量，即实数后跟随字母e或E，后面加上正负号，其后再加一个整型指数。
	语法：[digits][.digits][(E|e)][(+|-)digits]
	
	例如：
		3.14
		2345.789
		.33333333333
		6.02e23			// 6.02 * 10^23
		1.4738223E-32 	// 1.4738223 * 10^-32
		
	1.4 数字运算符
		+
		-
		*
		/
		
	JavaScript还采用了大量的算术函数，这些函数都被保存为Math对象的属性，可以使用直接量名Math来访问这些函数。
	如：计算数字 x 的正弦值：
		
		var size_of_x	= Math.sin(x);
		
		计算数字的平方根的表达式：
		
		var hypot = Math.sqrt(x*x + y*y);
	
	1.5 特殊的数值
	
	当一个浮点值大于所能表示的最大值时，其结果是一个特殊的无穷大值，JavaScript将它输出为Infinity。
	当一个负值比所能表示的最小的负值还小时，结果就是负无穷大，输出为-Infinity。
	当一个算术运算(如用0来除以0)产生了未定义的结果或错误时，返回一个特殊的JavaScript数值 NaN。
	NaN，它与任何数值都不相等，包括自己在内，需要用函数 isNaN() 来检测这个值。
	相关的函数isFinite()用来检测一个数字是否是NaN、正无穷大(Infinity)或负无穷大(-Infinity)。
	
	特殊值的常量定义：
	
		常量						含义
		Infinity					表示无穷大的特殊值
		NaN							特殊的非数字值		
		Number.MAX_VALUE			可表示的最大数字
		Number.MIN_VALUE			可表示的最小数字(与零接近的数字)
		Number.NaN					特殊的非数字值
		Number.POSITIVE_INFINITY	表示正无穷大的特殊值
		Number.NEGATIVE_INFINITY	表示负无穷大的特殊值
		
	2. 字符串
		字符串(string)是由Unicode字符、数字、标点符号等组成的序列，要表示单个字符，必须使用长度为1的字符串。
	2.1 字符串直接量
	所谓字符串，就是由单引号或双引号( '' 或 "" )括起来的Unicode字符阵列，其中可以含有0个或多个Unicode字符。
	由单引号定界的字符串中可以含有双引号，由双引号定界的字符串中也可以含有单引号。
	字符串直接量必须写在一行中，如果将它们放在两行中，会将它们截断。
	添加换行符，可以使用字符序列\n。
	
	""
	'testing'
	'name="myform"'
	"wouldn't you prefer People Express's book?"
	"This string \nhas two lines"  <=> 'This string \nhas two lines'
	
	2.2 字符串直接量中的转义序列
		反斜线(\)，在反斜线符号后加一个字符就表示在字符串中无法出现的字符。
		例如，\n是一个转义序列(escape sequence)，它表示的是一个换行符。
		
		JavaScript的转义序列
		
		序列	所代表的字符
		\0		NUL字符
		\b		退格符
		\t		水平制表符
		\n		换行符
		\v		垂直制表符
		\f		换页符
		\r		回车符
		\"		双引号
		\'		撇号或单引号
		\\		反斜线符
		\xXX	由两位十六进制数值XX指定的Latin-1字符
		\uXXXX	由四位十六进制数XXXX指定的Unicode字符
		\XXX	由一位到三味八进制数(1到377)指定的Latin-1字符，ECMAScript v3不支持这种转义
		
	2.3	字符串的使用
	如果将加号(+)运算符用于数字，那么就是将两个数字相加。
	如果将加号(+)作用于字符串，那么就会将两个字符串接起来，将第二个字符串附加在第一个之后。
	
	例如：var msg = 'Hello, ' + 'world'; // Hello, world
	
	确定一个字符串的长度（字符串包含的字符数），可以使用字符串的length属性。
	var s = 'Hello world';
	s.lenght; // 获取字符串s的长度
	
	var last_char = s.charAt(s.length - 1); // 获取字符串s的最后一个字符
	var sub = s.substring(1 , 4); // 从字符串s中抽出第二、三、四个字符
	// strVariable.substring(start, end); // 从包含start到end(不包含end)的字符串
	// 字符串中字符的索引是从0开始的
	var i = s.indexOf('a'); // 在字符串s中查找第一个字符"a"的位置
	
	注意：JavaScript的字符串和Javascript的数组一样，都是以0开始索引的。
	
2.4 把数字转换为字符串
	
	var n = 100;
	var s = n + ' bottles of beer on the wall.'; // 数字n将会转换为字符串
	
	var n_as_string = n + ''; // 通过数字与空字符串连接实现数字转换为字符串
	
	var string_value = String(number); // String()
	
	var n = 9999;
	var str_value = n.toString(); // number.toString([n]) 
	
	// number.toString([n]) ，n是可选参数，用来指定转换的基数。
	// 如果不指定n，则默认以10为基数，n取值范围2-36。
	
	var n = 17;
	var binary_string = n.toString(2); 	// Evaluate to "10001"
	var octal_string = '0' + n.toString(8);	// Evaluate to "021"
	var hex_string 	= '0x' + n.toString(16);	// Evaluate to "0x11"
	
	重点：
	toFixed()方法把数字转换为字符串，并且现实小数点后的指定的位数。
	toExponential()方法使用指数表示法把一个数字转换为字符串，小数点前面有1位数，而小数点后面有指定的位数。
	toPrecision()方法使用指定的有意义的位数来显示一个数字，如果有意义的位数还不够显示数字的整个整数部分，它
	就使用指数表示法。	
	toFixed(),toExponential(),toPrecision()都会用到四舍五入
	var n = 123456.789;
	n.toFixed(0);		// "123456"
	n.toFixed(2);		// "123456.79"
	n.Exponential(1);	// "1.2e+5" , toExponential()结果是小数点前有1位数，小数点后面有指定的位数
	n.Exponential(3);	// "1.235e+5"
	n.toPrecision(4);	// "1.235e+5" 4位数不够现实整数部分，所以使用了指数表示法
	n.toPrecision(7);	// "123456.8"
	
2.5 字符串转换为数字
	var product = "21" * "2"; 		// product is the number 42
	var string_value = 'hello world';
	var number = string_value - 0;  // 注意给一个字符串加一个0会导致字符串连接，而不是类型转换
	
	var number = Number(string_value); // Number()只接受开头和结尾的空白，不允许字符串中出现任何的非空字符。
	alert(Number(' 12345 ')); 	// 12345
	alert(Number(' 1234   5')); // NaN
	alert(Number(' demo1234')); // NaN
	
	parseInt()，只截取整数，可以接受另一个参数来指定要解析的数字的技术，合法值在2到36。
	parseInt("3 blind mice");	// 3
	parseInt(" 3.14 metres");	// 3.14
	parseInt("12.34");			// 12
	parseInt("0xff");			// 255
	parseInt("ff" , 16);		// 指定要转换的数ff是基数为16的
	
	parseFloat()，截取整数和浮点数。
	
	parseInt(),parseFloat()不能够把指定的字符串转换为数字，则返回NaN。
	如：
		parseInt('eleven');	// NaN
		parseFloat('$72.47'); // NaN
	如果一个字符串以“0”开头（而不是以“0x” 或 “0X”开头），parseInt()可能把它解释为一个八进制数或一个十进制数。、
	由于这一行为是不确定的，所以不应该使用parseInt()去解析用0开头的数字，除非显式指定所使用的基数，如：
	parseInt('075', 8); // 指075是以8为基数的
	
	0 NaN => false
	'' undefined => false
	
3 函数
	函数(function)是一个可执行的JavaScript代码段
	JavaScript的一个重要特性是JavaScript代码可以对函数进行操作。在很多语言中(包括Java)，函数
	都只是语言的语法特性，它们可以被定义，被调用，但却不是数据类型。
	JavaScript中的函数是真正的数值，可以被存储在变量、数组和对象中，而且函数还可以作为参数传递给其他函数。
	
	1)用函数定义来定义函数 square()
		function square(x) { return x*x; }
		
	2)用函数直接量来定义函数 square()
		var square = function(x) { return x*x; }
		
	3)把参数列表和函数体作为字符串传递给构造函数 Function()
		var square = new Function("x" , "return x*x;");
4 对象
	对象(object)是已命名的数据的集合，这些已命名的数据通常被作为对象的属性来引用。
	引用一个image对象的属性：
		image.width
		image.height
	如果一个函数值是存储在某个对象的属性中的，那么那个函数通常被称为方法，属性名也就变成了方法名。

	4.1 创建对象
	第七章中将看到对象是通过调用特殊的构造函数(constructor function)创建的
	 var o = new Object();
	 var now = new Date();
	 var pattern = new RegExp("\\sjava\\s" , "i");
	 
	 创建对象并设置对象的属性：
	 var point = new Object();
	 point.x = 2.3;
	 point.y = -1.2;
	 
	 4.2 对象直接量
	 对象直接量(也称为对象初始化程序)是由一个列表构成的，这个列表的元素是用冒号分隔的属性/值对，元素之间
	 用逗号隔开了，整个列表包含在花括号之中。
	 var point = { x: 2.3, y:-1.2};
	 
	 对象直接量也可以嵌套：
	 var rectangle = {  upperLeft: {x: 2, y: 2},
						lowerRight: {x: 4, y: 4}
					 };
	对象直接量中使用的属性值不鄙视常量，可以是任意的JavaScript表达式。
	另外，对象直接量中的属性名可以是字符串而不是标识符：
	var square = { "upperLeft": {x: point.x, y:point.y},
				   'lowerRight': {x:(point.x + side), y:(point.y + side)}
				 };
	
	null代表“无对象”的值
	
5 传值和传址
	数据操作的三种方式：复制、传递参数、比较
	
	5.1 基础类型和引用类型
	JavaScript的基本规则是：基本数据类型，通过传值来操作；而引用类型，就是通过传址来操作。
	
	数字和布尔类型在JavaScript都是基本类型，因为它们只是由一些很小的、固定数目的字节组成，这些字节很容易在
	在JavaScript解析器的较低层操作。
	另一方面，对象是引用类型。数组和函数，是对象的特殊类型，因此也是引用类型。
	这些数据类型可以包含任意数目的属性或元素，因此他们无法像固定大小的基本类型值那样很容易地操作。
	既然对象和数组的值可能会变得很大，那么，通过传值来操作这些类型也就是没有什么意义，因为这样子会涉及
	到对大量内存低效率地复制和比较。
	
	JavaScript中“传址传递”的意思是，对象和数组是用传值的方式传递的，只不过传递的这个值上是一个引用，而不是对象自身。
	
	比较字符串
	我们无法确定字符串是通过传值还是传址来复制和传递的，我们还是可以编写JavaScript代码
	来确定通过传值还是传址来比较他们。如下：
	
	/*
		Determining whether strings are compared value or reference is easy.
		We compare two clearly distinct string variables that happen to contain the same characters.
		If they are compared by value they will be equal, but if they are compared by reference,
		they will not be equal.
	*/
	var s1 = 'hello';
	var s2 = 'hell' + 'o';
	if( s1 == s2) document.write('Strings compared by value');
	
	// 上面这个实验说明了JavaScript中字符串是通过传值来比较的，从效率来推断，我们推测JavaScript
	// 字符串是通过传址来复制和传递的。
	// 字符串变量只能被重新赋值覆盖，而不能通过索引改变某个子字符串的值。
6 JavaScript中的数据类型操作(比较、复制、传递)

	类型		复制		传递	 	比较
	数字		传值		传值		传值	
	布尔		传值		传值		传值
	字符串		不可变		不可变		传值 (只有charAt()方法，没有setCharAt()方法)
	对象		传址		传址		传址

chapter 4 变量
	4.1
	JavaScript是非类型(untype)的，这意味着JavaScript的变量可以存放任何类型的值。
	可以先把一个数值赋给一个变量，然后再把一个字符串赋给它，这是完全合法的。
	有一个特性是与JavaScript缺少类型规则相关，即在必要时JavaScript可以快速、自动地
	将一种类型的值转换成另外一种类型。例如。如果想把一个数值连接到一个字符串上，那么
	JavaScript会自动把这个数值转换成相应的字符串，这样就可以将它连接到原来的字串之后了。

	4.2 变量的声明
	在JavaScript程序中，使用一个变量之前，必须先声明(declare)它。
	(如果不显式地声明一个变量，JavaScript将隐式地声明它。)
	变量是使用关键字var声明的，如下所示：
		var i;
		var sum;
	一个var关键字声明多个变量：var i, sum;
	
	变量声明和变量初始化绑定一起：
		var message = 'hello';
		var i = 0, j = 0, k = 0;
	
	如果没有用var语句给一个变量指定初始值，那么虽然这个变量被声明了，
	但是在给它存入一个值之前，它的初始值就是undefined。
	
	注意，var语句还可以作为for循环和for/in循环的一部分，这样就使循环变量的声明成为了循环语法自身的一部分。
	例如：
		for(var i = 0; i < 10; i++) document.write(i , '<br>');
		for(var i = 0, j = 10; i < 10; i++, j--) document.write(i*j, '<br>');
		for(var i in o) document.write(i, '<br>');
		
	由var声明的变量是永久性的，也就是说，用delete运算符来删除这些变量将会引发错误。
	
	重复的声明和遗漏的声明
	
	使用var语句多次声明同一个变量不仅是合法的，而且也不会造成任何错误。
	如果重复的声明有一个初始值，那么它担当的不过是一个赋值语句的角色。
	
	如果尝试读一个未声明的变量的值，JavaScript会生成一个错误。
	如果尝试给一个未用var声明的变量赋值，JavaScript会隐式声明该变量。但是要注意，
	隐式声明的变量总是被创建为全局变量，即使该变量只在一个函数体内使用。
	局部变量是只在一个函数中使用，要防止在创建局部变量时创建全局变量（或采用已有的全局变量），就
	必须在函数体内部使用var语句。无论是全局变量还是局部变量，最好都使用var语句创建。
	
	4.3 变量的作用域
	一个变量的作用域(scope)是程序中定义这个变量的区域。全局(global)变量的作用域(scope)是全局性的，即
	在JavaScript代码中，它处处都有定义。
	而在函数之内声明的变量，就只在函数体内部有定义，它们是局部(local)变量，作用域是局部性的。
	函数的参数也是局部变量，它们只在函数体内部有定义。
	在函数体内部，局部变量的优先级比同名的局部变量高。
	
	如果给一个局部变量或函数的参数声明的名字与某个全局变量的名字相同，那么就有效地隐藏了这个全局变量。
	例如，下面的代码将输出单词"local scope"：
		var scope = 'global scope'; 	// Declare global variable
			function checkScope() {
				var scope = 'local scope'; 	// Declare a local variable with the same name
				document.write(scope);		// Use the local variable. not the global one
			}
			
			checkScope(); // Prints "local"
	注意：在全局作用域中编写代码是可以不使用var语句，但是在声明局部变量时，一定要使用var语句。
	
	4.3.1 没有块级作用域
	JavaScript没有块级作用域，函数中声明的所有变量，无论是在哪里声明的，在整个函数中它们都是有
	定义的。
	
	下面代码中，变量i、j和k的作用域是相同的，它们三个在整个函数体中有定义。
		funtion test(o) {
			var i = 0; 		// i is defined throughout function
			if(typeof o == "object") { // if block
				var j = 0;	// j is defined everywhere, not just block
				for(var k = 0; k < 10; k++) { // k is everywhere, not just loop
					document.write(k);	// k is still defined: prints 10
				}
			}
			document.write(j);	// j is defined, but may not be initialized
		}
		
		// Example-2
		
		var scope = 'global';	
		function f() {
			alert(scope);	// Displayed "undefine", not "global"
			var scope = "local";	// Variable initialized here, but defined everywhere
			alert(scope);	// Displays "local"
		}
		//由于这个作用域规则的限制，第一个alert输出的并不是"global"。
		//局部变量在整个函数体内都是有定义的，这就意味着在整个函数体中都隐藏了同名的全局变量。
		//虽然局部变量在整个函数体中都是有定义的，但是在执行var语句之前，它是不会被初始化的。
		因此上面的例子中，函数f和下面的函数等价：
		
		function f() {
			var scope;	// 局部变量在函数开头声明
			alert(scope);	// 此处该变量有定义，但值仍为"undefined"
			scope = 'local'; 	// 现在初始化该变量，并给它赋值
			alert(scope);	//此处该变量具有值
		}
		//这个例子说明了为什么将所有的变量声明集中起来放置在函数的开头是一个好的编程习惯。
		
		4.4 基本类型和引用类型
		我们将数据类型分为两组，即基本类型和引用类型。
		
		数值、布尔值、null和undefined属于基本类型。
		对象、数组和函数属于引用类型。 
		？？？？那么字符串是数值什么类型呢？？？？
		基本类型在内存中具有固定的大小。
		引用类型则不同，例如，对象可以具有任意的长度，它并没有固定的大小。
		一个数组可以具有任意多个元素，函数可以包含任意数量的JavaScript代码。
		引用类型变量不能直接存取在于每个变量相关的内存中，相反，变量存储的是对这个值的引用。
		通常引用的形式是指针或者内存地址。虽然引用不是数据本身，但是它告诉变量在哪里可以找到这个值。
		
		基本类型和引用类型的差别：
			
			使用数值(一个基本类型)：
			var a = 3.14;	// Declare and initialize a variable
			var b = a ;		// Copy the variable's value to a new variable
			a = 4;			// Modify the value of the original variable
			alert(b);		// Display 3.14; the copy has not changed
			
			使用数组(一个引用类型):
			var a = [1, 2, 3];	// Initialize a variable to refer to an array
			var b = a;			// Copy that reference into a new variable
			a[0] = 99;			// Modify the array using the original reference
			alert(b);			// Display the changed array [99, 2, 3] using the new reference
			
			变量保存了基本类型(数值、布尔值、null和undefined)的实际值，
			但是对引用类型(对象、数组和函数)的值却只保存对它的引用。
			
			字符串是一个特例，因为它具有可变的大小，出于效率的原因，我们希望在复制和传递是通过对字符串的引用来实现。
			而在比较操作中，字符串是通过传值来比较的。
			
			P81 October 10 2014 21:41
			4.5 垃圾收集
			因为引用类型(数组、对象、函数)没有固定的大小，所以某些引用类型可能非常大。
			变量并不能直接保存引用的值，这些值被存储在某个位置，变量保存的只是对那个位置的引用。
			
			由于字符串、对象和数组没有固定大小，所以当它们的大小已知时，才能对它们进行动态的存储分配。
			JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样
			动态地分配了内存，最终都要释放这些内存以便它们能够再备用，否则，JavaScript的解释器将会消耗
			完系统中所有可用的内存，造成系统崩溃。
			
			JavaScript使用一种称为垃圾收集(garbage collection)的方法来释放内存，JavaScript的解释器可以
			检测到何时程序不再使用一个对象了。当它确定了一个对象是无用的时候(例如，程序中使用的变量再也
			无法引用这个对象了)，它就知道不再需要这个对象，可以把它占用的内存释放掉了。
			例如，下面的代码：
			
			var s = 'hello';	// Allocate memory for a string
			var u = s.toUpperCase();// Create a new string
			s = u;					// Overwrite reference to original string
			//运行了这些代码之后，就不能再获得原始的字符串"hello"，因为程序中没有变量
			再引用它了。系统检测到这一事实后，就会释放该字符串的存储空间以便这些空间
			再被利用。
			
			4.6 作为属性的变量
			在JavaScript中，变量基本上和对象的属性是一样的。
			
			4.6.1 全局对象
			当JavaScript的解释器开始运行时，首先在执行任何JavaScript代码之前，创建一个
			全局对象(global object)。这个对象的属性就是JavaScript程序的全局变量。当声明
			一个JavaScript的全局变量时，实际上所做的是定义了那个全局对象的一个属性。
			
			此外，JavaScript解释器会用预定义的值和函数来初始化全局对象的许多属性。例如，
			属性Infinity、parseInt和Math分别引用了数值infinity、预定义的函数parseInt()
			和预定义的对象Math。
			
			4.6.2 局部变量：调用对象
			如果全局变量是特殊的全局对象的属性，那么局部变量又是什么呢？
			它们也是一个对象的属性，这个对象被称为调用对象(call object)。
			虽然调用对象的生命周期比全局对象的短，但是它们的用途是相同的。
			在执行一个函数时，函数的参数和局部变量是作为调用对象的属性而存储的。
			用一个完全独立的对象来存储局部变量使JavaScript可以防止局部变量覆盖同名的全局变量的值。
			
			4.7 深入理解变量作用域
			基于JavaScript代码的语法结构来定义它，即全局变量具有全局的作用域，而函数中声明的变量
			具有局部的作用域。
			如果一个函数定义嵌套在另一个函数中，那么在嵌套的函数中声明的变量就具有嵌套的局部作用域。
			全局变量是全局对象的属性，而局部变量是一个特殊的调用对象的属性。
			
			每个JavaScript执行环境都有一个和它关联在一起的作用域链(scope chain)。这个作用域链是一个
			对象列表或对象链。
			当JavaScript代码需要查询变量x的值时(一个称为变量名解析(variable name resolution)的过程)，
			它就开始查看该链的第一个对象。如果那个对象有一个名为x的属性，那么就采用那个属性的值。如果
			第一个对象没有名为x的属性，JavaScript就会继续查询链中的第二个对象。如果第二个对象
			仍然没有名为x的属性，那么就继续查询下一个对象，以此类推。
			
			1)在JavaScript的顶层代码中(例如，不属于任何函数定义的代码)，作用域只由一个对象构成，
			那就是全局对象。所有的变量都是在这一对象中查询的。如果一个变量并不存在，那么这个
			变量的值就是未定义的。
			2)在一个(非嵌套的)函数中，作用域链是由两个对象构成的，第一个是函数的调用对象，
			第二个就是全局对象。
			当函数引用一个变量时，首先检查的是调用对象(call object，局部作用域)，其次才
			检查全局对象(global object，全局作用域)。
			在一个嵌套函数的作用域链中可以有三个或更多的对象。
			
			词法作用域								作用域链			变量查找
			var x = 1;					全局变量	 x: 1				   否，未定义
																		在此定义吗？->是，获得值
			function f() {				调用f()对象  y: 2					
				var y = 2;
				function g() {			调用g()对象  z: 3
					var z = 3;
				}
			}
			
			
			5. 比较运算符
			>
			<
			>= ，不小于
			<= ，不大于
			一个特例是当某个运算数是(或被转换为)NaN时，四个比较运算符都返回false。
			
			in运算符
			in运算符要求其左边的运算数是一个字符串，或可以被转换为字符串，右边的运算数是一个对象或数组。
			如果该运算符左边的值是其右边对象的一个属性名，它返回true。
			例如：
			var point = { x: 1, y: 1};	// Define an object
			var has_x_coord = "x" in point;	// Evaluates to true
			var has_y_coord = "y" in point; // Evaluates to true
			var has_z_coord = "z" in point; // Evaluates to false; not a 3-D point
			var ts = "toString" in point; // Inherited property; evalutes to true
			
			instanceof运算符
			instanceof运算符要求其左边的运算数是一个对象，右边的运算数是对象类的名字。
			如果该运算符左边的对象是右边类的一个实例，它返回true，否则返回false。
			在JavaScript中，对象类是由用来初始化他们的构造函数定义的。因此，instanceof运算符右边的运算数
			应该是一个构造函数的名字。注意，所有对象都是Object类的实例。
			如：
			
			var d = new Date(); // Create a new object with Date() constructor
			d instanceof Date;	// Evaluates to true; d was created with Date()
			d instanceof Object; // Evaluates to true; all objects are instance of Object
			d instanceof Number; // Evaluates to false; d in not a Number object
			var a = [1, 2, 3]; // Create an array with array literal syntax
			a instanceof Array; // Evaluates to true; a is an array
			a instanceof Object; // Evaluates to true; all arrays are objects
			a instanceof RegExp; // Evaluate to false; arrays are not regular expressions
			如果instanceof运算符的左运算数不是对象，或者右边的运算数是一个对象，而不是一个构造函数，它将返回false。
			另外，如果它右边运算数根本就不是对象，它就返回一个运行时错误
			
			字符串运算符
			
			运算符“+”将连接两个字符串运算数
			运算符<、<=、>和>=将通过比较两个字符串来确定它们的顺序，这个比较采用的是字母顺序。
			这里的字母顺序是基于JavaScript使用的Unicode字符编码标准的。
			在这种编码标准中，所有Latin字母表的大写字母都位于小写字母之前(即小于)。
			
			逻辑运算符
			当运算符&&的两个运算数都是布尔值时，它对这两个运算数执行布尔AND操作，即当且仅当它的两个运算数
			都是true时，它才返回true。如果其中一个或两个运算数值为false，它就返回false。
			
			注意，该运算符既可以计算其右边表达式的值，也可以不计算这个值，这由它左边的表达式的值决定的。
			下面两行代码利用&&运算符这一特性：
			这两行代码是等效的：
			if(a == b) stop();
			(a == b)&& stop(); // &&运算符，只有左边的为真，右边的才会执行；左边的为假，那么右边的不执行
			
			&&运算符的这种特性最好少用，容易造成bug，例如：
			if ((a == null) && (b++ > 10)) {stop();}
			只要左边的表达式的值为false，那么右边的递增运算符就不会被执行。特别是如果b要用到其他地方的话。
			
			注意：&&运算符的实际行为是，它将计算第一个运算数，也就是位于它左边的表达式。如果这个表达式的值可以
			被转换为false（例如：左边运算数的值为null、0、undefined），那么运算符将返回左边表达式的值。否则，它
			将计算第二个运算数，也就是位于它右边的表达式，并且返回这个表达式的值。
			
			|| 运算
			var a = (9-3) || (5 - 5); // 6
			var b = (3-3) || (4 - 5); // -1
			
			注意：||的实际行为，首先，它要计算第一个运算数，即它左边的表达式的值。如果这个表达式的值可以
			被转换成true，那么它就返回左边这个表达式的值。否则，它将计算第二个运算数，即位于它右边的表达式，
			并且返回该表达式的值。
			
chapter 6
	
	for/in 循环
	
	下面的代码把一个对象的所有属性名复制到一个数组中：
	var o = {x: 1, y: 2, z: 3};
	var a = new Array();
	var i = 0;
	for(a[i++] in o) /*empty loop body*/
	
	break 语句， 退出一个循环。当用于你一个嵌套循环中时，如果在内层的循环中使用了 break，那么该break
	只是退出当前的内层循环，外层的循环会继续执行，只有遇到指定退出外层循环的 break 语句，那么才会退出
	外层循环。
		break;
		break labelname;
			
	continue 语句
		continue 语句，不是退出一个循环，而是开始循环的一次新迭代。
		用法： 	continue;
				continue labelname;
		continue 语句(无论是带标签还是不带标签)只能用在 while 语句、do/while 语句、for语句
		或者 for/in 语句的循环体之中，在其他地方使用它都会引起语法错误。
		执行 continue 语句时，封闭循环的当前迭代就会被终止，开始执行下一次迭代。
		这对不同类型的循环语句含义是不同的：
			1)在 while 循环中，会再次检测循环开头的 expression，如果它的值为 true，将从头开始
			执行循环体。
			2)在 do/while 循环中，会跳到循环的底部，在顶部开始下次循环之前，会在此先检测循环条件。
			3)在 for 循环中，先计算 increment 表达式，然后再检测 test 表达式以确定是否应该执行下
			一次迭代。
			4)在 for/in 循环中，将以下一个赋给循环变量的属性名再次开始新的迭代。
			
	function 语句
		function funcname([arg1 [,arg2 [..., argn]]]) {
			statements
		}
		语句是在执行时执行的，而函数是在实际运行之前，当 JavaScript 代码被解析或者被编译时定义的。
		当 JavaScript 解析程序遇到一个函数定义时，它就解析并存储(而不无需执行)构成函数主体的语句，然后定义
		一个和函数同名的属性(如果函数定义嵌套在其他函数中，那么就在调用对象中定义这个属性，否则在全局对象中
		定义这个属性)以保存它。
		
		函数定义在解析时发生，而不是在运行时发生，这一事实产生了某些令人吃惊的作用。
		考虑如下的代码：
			alert(f(4));		// Display 16. f() can ben called before it is defined.
			var f = 0;			// This statement overwrites the property f.
			function f(x) { 	// This "statement" defines the function f before either
				return x*x;		// of the lines above are executed.
			}
			alert(f);			// Display 0. f() has been overwritten by the variable f.
			出现上面这些特殊情况，主要是由于函数定义和变量定义发生在不同时刻。
			

	
	
	
	
	
