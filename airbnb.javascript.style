Airbnb JavaScript Style Guide(){
1. Types
2. Objects
3. Arrays
4. Strings
5. Functions
6. Properties
7. Varibles
8. Hoisting
9. Conditional Expressions & Equality
10. Blocks
11. Comments
12. Whitespace
13. Commas
14. Semicolons
15. Type Casting & Coercion
16. Naming Conventions
17. Accessors
18. Constructors
19. Event
20. Modules
21. jQuery
22. ECMAScript 5 Compatibility
23. Testing
24. Performance
25. Resources
26. In the Wild
27. Translation
28. The JavaScript Style Guide Guide
29. Contributors
30. License

Types
Primitives: When you access a primitive type you work directly on its value.
string
number
boolean
null
undefined
var foo = 1,
	bar = foo;
bar = 9;
console.log(foo, bar);//=>1, 9
Complex: When you access a complex type you work on a reference to its value.
object
array
function
var foo = [1, 2],
	bar = foo;
bar[0] = 9;
console.log(foo[0], bar[0]);// => 9, 9

Objects
Use the literal syntax for object creation.
//bad
var item = new Object();

//good
var item = {};

Don't use reserved words(保留字) as keys. It won't work in IE8.
//bad
var superman = {
	default: {clark: 'kent'},
	private: true
};

//good
var superman = {
	defaults: {clark: 'kent'},
	hidden: true
};


Use readable synonyms in place of reserved words.[使用可读的同义词来代替保留字]
// bad
var superman = {
	class: 'alien'
};

// bad
var superman = {
	klass: 'alien'
};

//good
var superman = {
	type: 'alien'
};

Arrays
Use the literal syntax for array creation

// bad 
var items = new Array();

//good
var items = [];

If you don't know array length use Array#push.
var someStack = [];
//bad
someStack[someStack.length] = 'abcdefghijk';
//good
someStack.push('abcdefghijk');

When you need to copy an array use Array#slice.(jsPerf)
var len = items.length,
	itemCopy = [],
	i;
// bad
for(i = 0; i < len; i++){
	itemsCopy[i] = items[i];
}

// good
itemsCopy = items.slice();

To convert an array-like object to an array, use Array#slice.
[将一个与数组相似的对象转换为一个数组，使用Array#slice.]
function trigger(){
	var args = Array.prototype.slice.call(arguments);//???
	...
}

Strings
Use single quotes [''] for strings
// bad
var name = "Bob Parr";
// good
var name = 'Bob Parr';
// bad
var fullname = "Bob" + this.laseName;
// good
var fullName = 'Bob' + this.lastName;

String longer than 80 characters should be written across multiple line using concatenation.
[字符串超过80个字符的，应该通过连接符(+)分多行来写。]
Note: If overused, long strings with concatenation could impact performance.[jsPerf & Discussion]
[ 如果过度使用，长字符串使用连接符可能会影响到性能。]
// bad 
var errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';

// bad
var errorMessage = 'This is a super long error that was thrown because \
of Batman. When you stop to think about how Batman had anything to do \
with this, you would get nowhere \
fast.';

// good
var errorMessage = 'This is a super long error that was thrown because '+
	'of Batman. Whem you stop to think about how Batman had anything to do '+
	'with this, you would get nowhere fast.';

When programmatically building up a string, use Array#join instead of string concatenation. 
Mostly for IE:jsPerf.

var items,
	messages,
	length,
	i;
messages = [{
	state: 'success',
	message: 'This one worked.'
},{
	state: 'success',
	message: 'This one worked as well.'
},{
	state: 'error',
	message: 'This one did not work.'
}];

length = messages.length;

// bad
function inbox(messages){
	items = '<ul>';
	for(var i = 0; i < length; i++){
		items +='<li>' + messages[i].message + '</li>';
	}
	return items + '</ul>';
}

// good
function inbox(messages){
	items = [];
	for(var i = 0; i < length; i++){
		items[i] = messages[i].message;
	}
	return '<ul><li>' + items.join('</li><li>') + '</li></ul>';
}

Functions

Function expressions:

// anonymous function expression
var anonymous = function(){
	return true;
};
// name function expression
var named = function named(){
	return true;
};
// immediately-invoked function expression (IIFE)[立即调用函数表达式]
(function(){
	console.log('Welcome to the Internet. Please follow me.');
})();

Never declare a function in a non-function block(if,while,etc).Assign the function to a variable instead.
Browsers will allow you to do it, but they all intepret[解释] it differently, which is bad news bears.
Note: ECMA-262 defines a (block) as a list of statements. A function declaration is not a statement.
Read ECMA-262's note on this issue.

// bad 
if(currentUser){
	function test(){
		console.log('Nope.');
	};
}

// good
var test;
if(currentUser){
	test = function test(){
		console.log('Yup.');
	};
}

Never name a parameter arguments, this will take precedence over the arguments object that is given to every function scope.
[绝对不要命名一个名为arguments参数，这将会导致该参数优先权高于每个函数作用域中自带的arguments对象。]

// bad
function nope(name, options, arguments){
	// ...stuff...
};

// good
function yup(name, options, args){
	// ...stuff...
};

Properties
Use dot notation[符号] when accessing properties.
var luke = {
	jedi: true,
	age: 28
};

// bad 
var isJedi = luke['jedi'];

// good
var isJedi = luke.jedi;

Use subscript notation(下标符号) [] when accessing properties with a variable.
[通过变量来访问属性时，使用下标符号([])。]
var luke = {
	jedi: true,
	age: 28
};

function getProp(prop){
	return luke[prop];//using subscript notation
};

var isJedi = getProp('jedi');

Variables
Always use var to declare variables. Not doing so will result in global variables. We want to avoid polluting
the global namespace. Captain Planet warned us of that.
// bad
superPower = new SuperPower();

// good
var superPower = new SuperPower();

Use one var declaration for multiple variables and declare each variable on a new line.
[使用一个var来声明多个变量，并且每个变量占一行。]

var items = getItems();
var goSportsTeam = true;
var dragonball = 'z';

// good
var items = getItems(),
	goSportsTeam = true;
	dragonball = 'z';
	
Declare unassigned variables last. This is helpful when later on you might need to assign a variable 
depending on one of the previous assign variables.
[声明多个变量时，没有赋值的变量放在声明的最后。这个将会很有用，当后面你需要通过赋值的变量来给未赋值的
变量赋值时。]

// bad 
var i, len, dragonball,
	items = getItems(),
	goSportsTeam = true;

// bad
var i, items = getItems(),
	dragonball.
	goSportsTeam = true,
	len;
	
// good
var items = getItems(),
	goSportTeam = true,
	dragonball,
	length,
	i;

Assign variables at the top of their scope. This helps avoid issues with variable declaration and assignment
hoisting related issues.
[在变量作用域的开始处进行赋值，这样子就会避免发生因为变量声明和变量赋值的问题引起相关问题。]
// bad
function(){
	test();
	console.log('doing stuff..');
	//..other stuff..
	var name = getName();// Assign variables
	if(name === 'test'){
		return false;
	}
	return name;
};

// good
function(){
	var name = getName();// Assign variables
	test();
	console.log('doing stuff...');
	
	//..other stuff..
	if(name === 'test'){
		return false;
	}
	return name;
}

// bad
function(){
	var name = getName(); // Assign variable
	if(!arguments.length){
		return false;
	}
	return true;
}

// good
function(){
	if(!arguments.length){
		return false;
	}
	var name = getName();
	return true;
}

Hoisting

Variable declaration get hoisted to the top of their scope, their assignment does not.
// we know this wouldn't work (assuming there
// is no notDefined global variable)
function example(){
	console.log(notDefined);// => throws a ReferemceError
}

// creating a variable declaration after you
// reference the variable will work due to 
// variable hoisting. Note: the assignment
// value of 'true' is not hoisted.
function example(){
	console.log(declaredButtonAssigned); // => undefined
	var declarationButtonNotAssigned = true;
}

// The interpreter is hoisting the variable
// declaration to the top of the scope.
function example(){
	var declaredButNotAssigned;
	console.log(declaredButNotAssigned); // => undefined
	declaredButNotAssigned = true;
}

Anonymous function expressions hoist their variable name, but not the function assignment.

function example(){
	console.log(anonymous); // => undefined
	anonymous(); // => TypeError anonymous is not a function
	var anonymous = function(){
		console.log('anonymous function expression');
	};
}

Named function expressions hoist the variable name, not the function name or the function body.

function example(){
	console.log(named); // => undefined
	named(); // => TypeError named is not a function
	superPower(); // => ReferenceError superPower is not defined
	var named = function superPower(){
		console.log('Flying');
	};
}

// the same is true when the function name
// is the same as the variable name.
function example(){
	console.log(named); // => undefined
	named(); // => TypeError named is not a function
	var named = function named(){
		console.log('named');
	};
}

Function declarations hoist their name and the function body.

function example(){
	superPower(); // => Flying
	function superPower(){
		console.log('Flying');
	}
}

For more information refer to JavaScript Scoping & Hoisting by Ben Cherry

Conditional Expressions & Equality(等式)

Use === and !== over == and !=.
Conditional expressions are evaluated using coercion with the ToBoolean method and always follow these
simple rules:[条件表达式语句使用ToBoolean方法强制转换后判断，并且遵守下面这些简单规则]

Objects evaluate to true
Undefined evaluates to false
Null evaluates to false
Booleans evaluate to the value of the boolean
Numbers evaluate to false if +0,-0,or NaN, otherwise true
Strings evaluate to false if an empty string '', otherwise true
[],{},'' evaluate to true
if([0]){
	// true
	// An array is an object, objects evaluate to true
}

Use shortcuts.

// bad
if(name !== ''){
	// false, string evaluate to false if an empty string ''
	// ...stuff...
}

// good
if(name){
	// ...stuff...
}

// bad
if(collection.length > 0){
	// ...stuff...
}

// good
if(collection.length){
	// ...stuff...
}

For more information see Truth Equality and JavaScript by Angus Croll

Blocks[代码段，代码块，块]

Use braces[大括号] with all multi-line blocks.

// bad 
if(test)
	return false;
	
// good
if(test) return false;

// good
if(test){
	return false;
}

// bad
function(){return false;}

// good
function(){
	return false;
}

Comments

Use /** ... **/ for multiline commentx. Include a description, specify types and values for all parameters

